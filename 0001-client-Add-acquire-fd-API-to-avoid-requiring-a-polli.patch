From ceb0cb63654d0e123cba13b1478212d12f5af747 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Kristian=20H=C3=B8gsberg?= <krh@bitplanet.net>
Date: Sun, 17 Mar 2013 14:21:48 -0400
Subject: [PATCH] client: Add acquire-fd API to avoid requiring a polling main
 thread

The current thread model assumes that the application or toolkit will have
a thread that either polls the display fd and dispatches events or just
dispatches in a loop.  Only the main thread will read from the fd while
all other threads will block on a pthread condition and expect the main
thread to deliver events to them.

This turns out to be too restrictive.  Qt QML threaded rendering will
block the main thread on a condition that's signaled by a rendering
thread after it finishes rendering.  This leads to a deadlock when the
rendering threads blocks in eglSwapBuffers(), and the main thread is
waiting on the condition.  Another problematic use case is with games
that has a rendering thread for a splash screen while the main thread
is busy loading game data.

The solution seems pretty straightforward: just let all threads read
from the fd.  The main-thread restriction was introduced to avoid a
race, however.  Simplified, main loops will do this:

	wl_display_dispatch_pending(display);

	/* Race here if other thread reads from fd and places events
	 * in main eent queue.  We go to sleep in poll while sitting on
	 * events that may stall the application if not dispatched. */

	poll(fds, nfds, -1);

	/* Race here if other thread reads and doesn't queue any
	 * events for main queue. wl_display_dispatch() below will block
	 * trying to read from the fd, while other fds in the mainloop
	 * are ignored. */

	wl_display_dispatch(display);

The restriction that only the main thread can read from the fd avoids
these races, but has the problems described above.

This patch introduces new API to solve both problems.  We add

	int wl_display_acquire_fd(struct wl_display *display);

which returns the display fd and blocks any thread trying to read from
the fd.  Calling wl_display_dispatch() will read events, release the fd
and the dispatch events.  Alternatively,  if after acquiring and polling
the fd, a thread decides to not call wl_display_dispatch() after all,
the fd can be released by calling wl_display_release_fd().  This is
typically useful when poll returns without data on the fd, eg in case of
timeout.

The client library starts out in the legacy mode, where we assume
the dedicated event thread.  Calling wl_display_acquire_fd() will enable
the new all-threads-can-read semantics.
---
 src/wayland-client.c | 245 ++++++++++++++++++++++++++++++++++++++++++---------
 src/wayland-client.h |   4 +
 2 files changed, 206 insertions(+), 43 deletions(-)

diff --git a/src/wayland-client.c b/src/wayland-client.c
index 7847370..187854d 100644
--- a/src/wayland-client.c
+++ b/src/wayland-client.c
@@ -21,6 +21,8 @@
  * OF THIS SOFTWARE.
  */
 
+#define _GNU_SOURCE
+
 #include <stdlib.h>
 #include <stdint.h>
 #include <stddef.h>
@@ -83,6 +85,9 @@ struct wl_display {
 	struct wl_event_queue queue;
 	struct wl_list event_queue_list;
 	pthread_mutex_t mutex;
+
+	int reader_count;
+	pthread_cond_t reader_cond;
 };
 
 /** \endcond */
@@ -522,6 +527,8 @@ wl_display_connect_to_fd(int fd)
 	wl_event_queue_init(&display->queue, display);
 	wl_list_init(&display->event_queue_list);
 	pthread_mutex_init(&display->mutex, NULL);
+	pthread_cond_init(&display->reader_cond, NULL);
+	display->reader_count = 0;
 
 	wl_map_insert_new(&display->objects, WL_MAP_CLIENT_SIDE, NULL);
 
@@ -537,14 +544,19 @@ wl_display_connect_to_fd(int fd)
 	display->proxy.refcount = 1;
 
 	display->connection = wl_connection_create(display->fd);
-	if (display->connection == NULL) {
-		wl_map_release(&display->objects);
-		close(display->fd);
-		free(display);
-		return NULL;
-	}
+	if (display->connection == NULL)
+		goto err_connection;
 
 	return display;
+
+ err_connection:
+	pthread_mutex_destroy(&display->mutex);
+	pthread_cond_destroy(&display->reader_cond);
+	wl_map_release(&display->objects);
+	close(display->fd);
+	free(display);
+
+	return NULL;
 }
 
 /** Connect to a Wayland display
@@ -599,6 +611,7 @@ wl_display_disconnect(struct wl_display *display)
 	wl_map_release(&display->objects);
 	wl_event_queue_release(&display->queue);
 	pthread_mutex_destroy(&display->mutex);
+	pthread_cond_destroy(&display->reader_cond);
 	if (display->fd > 0)
 		close(display->fd);
 
@@ -851,65 +864,161 @@ dispatch_event(struct wl_display *display, struct wl_event_queue *queue)
 }
 
 static int
-dispatch_queue(struct wl_display *display,
-	       struct wl_event_queue *queue, int block)
+read_events(struct wl_display *display)
 {
-	int len, size, count, ret;
-
-	pthread_mutex_lock(&display->mutex);
-
-	if (display->last_error)
-		goto err_unlock;
+	int len, size;
 
-	ret = wl_connection_flush(display->connection);
-	if (ret < 0 && errno != EAGAIN) {
-		display_fatal_error(display, errno);
-		goto err_unlock;
-	}
-
-	if (block && wl_list_empty(&queue->event_list) &&
-	    pthread_equal(display->display_thread, pthread_self())) {
+	display->reader_count--;
+	if (display->reader_count == 0) {
 		len = wl_connection_read(display->connection);
 		if (len == -1) {
 			display_fatal_error(display, errno);
-			goto err_unlock;
+			return -1;
 		} else if (len == 0) {
 			display_fatal_error(display, EPIPE);
-			goto err_unlock;
+			return -1;
 		}
 		while (len >= 8) {
 			size = queue_event(display, len);
 			if (size == -1) {
 				display_fatal_error(display, errno);
-				goto err_unlock;
+				return -1;
 			} else if (size == 0) {
 				break;
 			}
 			len -= size;
 		}
-	} else if (block && wl_list_empty(&queue->event_list)) {
-		pthread_cond_wait(&queue->cond, &display->mutex);
-		if (display->last_error)
-			goto err_unlock;
+
+		pthread_cond_broadcast(&display->reader_cond);
+	} else {
+		while (display->reader_count > 0)
+			pthread_cond_wait(&display->reader_cond,
+					  &display->mutex);
 	}
 
+	return 0;
+}
+
+WL_EXPORT int
+wl_display_read_events(struct wl_display *display)
+{
+	int ret;
+
+	pthread_mutex_lock(&display->mutex);
+
+	ret = read_events(display);
+
+	pthread_mutex_unlock(&display->mutex);
+
+	return ret;
+}
+
+static int
+dispatch_queue(struct wl_display *display, struct wl_event_queue *queue)
+{
+	int count;
+
+	if (display->last_error)
+		goto err;
+
 	for (count = 0; !wl_list_empty(&queue->event_list); count++) {
 		dispatch_event(display, queue);
 		if (display->last_error)
-			goto err_unlock;
+			goto err;
 	}
 
-	pthread_mutex_unlock(&display->mutex);
-
 	return count;
 
-err_unlock:
+err:
 	errno = display->last_error;
-	pthread_mutex_unlock(&display->mutex);
 
 	return -1;
 }
 
+/** Ensure exclusive access to display file descriptor
+ *
+ * \param display The display context object
+ * \return Display object file descriptor or -1 if another thread
+ *	locked the file descriptor.
+ *
+ * This locks the file descriptor for the display, ensuring no other
+ * threads will read from it between returning from this function and
+ * calling wl_display_dispatch().
+ *
+ * Use this function to integrate the display fd into a toolkit event
+ * loop in a race-free way.  Typically, a toolkit will call
+ * wl_display_dispatch_pending() before sleeping, to make sure it
+ * doesn't block with unhandled events.  Upon waking up, it will
+ * assume the file descriptor is readable and read events from the fd
+ * by calling wl_display_dispatch().  Simplified, we have:
+ *
+ *   wl_display_dispatch_pending(display);
+ *   poll(fds, nfds, -1);
+ *   wl_display_dispatch(display);
+ *
+ * There are two races here: first, before blocking in poll(), the fd
+ * could become readable and another thread reads the events.  Some of
+ * these events may be for the main queue and the other thread will
+ * queue them there and then the main thread will go to sleep in
+ * poll().  This will stall the application, which could be waiting
+ * for a event to kick of the next animation frame, for example.
+ *
+ * The other race is immediately after poll(), where another thread
+ * could preempt and read events before the main thread calls
+ * wl_display_dispatch().  This call now blocks and starves the other
+ * fds in the event loop.
+ *
+ *   wl_display_prepare_read(display, queue);
+ *   poll(fds, nfds, -1);
+ *   wl_display_read_events(display);
+ *   wl_display_dispatch_queue_pending(display, queue);
+ *
+ * Calling wl_display_acquire_fd() ensures that no other thread will
+ * read the display fd.  This means that no events will be queued
+ * between dispatching pending events and going to sleep in the event
+ * loop and that no other thread will read from the fd when data
+ * becomes available.  Calling wl_display_dispatch() will read events,
+ * unlock the fd and then dispatch new main queue events, if any.
+ *
+ * If another thread has locked the file descriptor, this function
+ * returns -1 and errno is set to EBUSY.
+ *
+ * \memberof wl_display
+ */
+WL_EXPORT int 
+wl_display_prepare_read(struct wl_display *display)
+{
+	pthread_mutex_lock(&display->mutex);
+
+	display->reader_count++;
+
+	pthread_mutex_unlock(&display->mutex);
+
+	return 0;
+}
+
+/** Release exclusive access to display file descriptor
+ *
+ * \param display The display context object
+ *
+ * This releases the exclusive access.  Useful for canceling the lock
+ * when a timed out poll returns fd not readable and we're not going
+ * to read from the fd anytime soon.
+ *
+ * \memberof wl_display
+ */
+WL_EXPORT void
+wl_display_cancel_read(struct wl_display *display)
+{
+	pthread_mutex_lock(&display->mutex);
+
+	display->reader_count--;
+	if (display->reader_count == 0)
+		pthread_cond_broadcast(&display->reader_cond);
+
+	pthread_mutex_unlock(&display->mutex);
+}
+
 /** Dispatch events in an event queue
  *
  * \param display The display context object
@@ -930,7 +1039,49 @@ WL_EXPORT int
 wl_display_dispatch_queue(struct wl_display *display,
 			  struct wl_event_queue *queue)
 {
-	return dispatch_queue(display, queue, 1);
+	struct pollfd pfd[2];
+	int ret;
+
+	pthread_mutex_lock(&display->mutex);
+
+	ret = dispatch_queue(display, queue);
+	if (ret == -1)
+		goto err_unlock;
+	if (ret > 0) {
+		pthread_mutex_unlock(&display->mutex);
+		return ret;
+	}
+
+	display->reader_count++;
+
+	ret = wl_connection_flush(display->connection);
+	if (ret < 0 && errno != EAGAIN) {
+		display_fatal_error(display, errno);
+		goto err_unlock;
+	}
+
+	pthread_mutex_unlock(&display->mutex);
+
+	pfd[0].fd = display->fd;
+	pfd[0].events = POLLIN;
+	if (poll(pfd, 1, -1) == -1)
+		return -1;
+
+	pthread_mutex_lock(&display->mutex);
+
+	if (read_events(display) == -1)
+		goto err_unlock;
+
+	if (dispatch_queue(display, queue) == -1)
+		goto err_unlock;
+
+	pthread_mutex_unlock(&display->mutex);
+
+	return 0;
+
+ err_unlock:
+	pthread_mutex_unlock(&display->mutex);
+	return -1;
 }
 
 /** Dispatch pending events in an event queue
@@ -950,7 +1101,18 @@ WL_EXPORT int
 wl_display_dispatch_queue_pending(struct wl_display *display,
 				  struct wl_event_queue *queue)
 {
-	return dispatch_queue(display, queue, 0);
+	pthread_mutex_lock(&display->mutex);
+
+	if (dispatch_queue(display, queue) == -1)
+		goto err_unlock;
+
+	pthread_mutex_unlock(&display->mutex);
+
+	return 0;
+
+ err_unlock:
+	pthread_mutex_unlock(&display->mutex);
+	return -1;
 }
 
 /** Process incoming events
@@ -969,7 +1131,8 @@ wl_display_dispatch_queue_pending(struct wl_display *display,
  * or not. For dispatching main queue events without blocking, see \ref
  * wl_display_dispatch_pending().
  *
- * \note Calling this makes the current thread the main one.
+ * \note Calling this will release the display file descriptor if this
+ * thread acquired it using wl_display_acquire_fd().
  *
  * \sa wl_display_dispatch_pending(), wl_display_dispatch_queue()
  *
@@ -978,9 +1141,7 @@ wl_display_dispatch_queue_pending(struct wl_display *display,
 WL_EXPORT int
 wl_display_dispatch(struct wl_display *display)
 {
-	display->display_thread = pthread_self();
-
-	return dispatch_queue(display, &display->queue, 1);
+	return wl_display_dispatch_queue(display, &display->queue);
 }
 
 /** Dispatch main queue events without reading from the display fd
@@ -1024,9 +1185,7 @@ wl_display_dispatch(struct wl_display *display)
 WL_EXPORT int
 wl_display_dispatch_pending(struct wl_display *display)
 {
-	display->display_thread = pthread_self();
-
-	return dispatch_queue(display, &display->queue, 0);
+	return wl_display_dispatch_queue_pending(display, &display->queue);
 }
 
 /** Retrieve the last error occurred on a display
diff --git a/src/wayland-client.h b/src/wayland-client.h
index 578fa7e..d58092f 100644
--- a/src/wayland-client.h
+++ b/src/wayland-client.h
@@ -152,6 +152,10 @@ int wl_display_flush(struct wl_display *display);
 int wl_display_roundtrip(struct wl_display *display);
 struct wl_event_queue *wl_display_create_queue(struct wl_display *display);
 
+int wl_display_prepare_read(struct wl_display *display);
+void wl_display_cancel_read(struct wl_display *display);
+int wl_display_read_events(struct wl_display *display);
+
 void wl_log_set_handler_client(wl_log_func_t handler);
 
 #ifdef  __cplusplus
-- 
1.8.1.4

